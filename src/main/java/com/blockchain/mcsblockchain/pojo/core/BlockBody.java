package com.blockchain.mcsblockchain.pojo.core;

import com.blockchain.mcsblockchain.pojo.crypto.PKType;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class BlockBody implements Serializable {

    private static final long serializeVersionUID=1L;

    private List<PKType> enclavePubKeyCS;    //enclave public key generated by different cloud server
    private List<PKType> keyListRevoke;      //public key list of revoke key
    private List<PKType> keyListAlter;       //public key and its trust value list of alternate key(PK||TV)
    private List<PKType> keyListRegister;    //public key list of registration
    private String PIData;                  //The hashes of all trust-related data used for trust evaluation
    private List<String> MCSRelatedHash;     //the hashes of MCS related data
    private List<Transaction> transactionList;      //交易集合

    @Override
    public String toString() {
        return "BlockBody{" +
                "enclavePubKeyCS=" + enclavePubKeyCS +
                ", keyListRevoke=" + keyListRevoke +
                ", keyListAlter=" + keyListAlter +
                ", keyListRegister=" + keyListRegister +
                ", PIData='" + PIData + '\'' +
                ", MCSRelatedHash=" + MCSRelatedHash +
                ", transactionList=" + transactionList +
                '}';
    }

    public BlockBody() {
        this.enclavePubKeyCS=new ArrayList<>();
        this.keyListAlter=new ArrayList<>();
        this.keyListRegister=new ArrayList<>();
        this.keyListRevoke=new ArrayList<>();
        this.PIData=null;
        this.transactionList=new ArrayList<>();
        this.MCSRelatedHash=null;
    }

    public List<PKType> getEnclavePubKeyCS() {
        return enclavePubKeyCS;
    }

    public void setEnclavePubKeyCS(List<PKType> enclavePubKeyCS) {
        this.enclavePubKeyCS = enclavePubKeyCS;
    }

    public List<PKType> getKeyListRevoke() {
        return keyListRevoke;
    }

    public void setKeyListRevoke(List<PKType> keyListRevoke) {
        this.keyListRevoke = keyListRevoke;
    }

    public List<PKType> getKeyListAlter() {
        return keyListAlter;
    }

    public void setKeyListAlter(List<PKType> keyListAlter) {
        this.keyListAlter = keyListAlter;
    }

    public List<PKType> getKeyListRegister() {
        return keyListRegister;
    }

    public void setKeyListRegister(List<PKType> keyListRegister) {
        this.keyListRegister = keyListRegister;
    }

    public String getPIData() {
        return PIData;
    }

    public void setPIData(String PIData) {
        this.PIData = PIData;
    }

    public List<String> getMCSRelatedHash() {
        return MCSRelatedHash;
    }

    public void setMCSRelatedHash(List<String> MCSRelatedHash) {
        this.MCSRelatedHash = MCSRelatedHash;
    }

    public List<Transaction> getTransactionList() {
        return transactionList;
    }

    public void setTransactionList(List<Transaction> transactionList) {
        this.transactionList = transactionList;
    }
    public String serialize() throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream objectOS = new ObjectOutputStream(out);
        objectOS.writeObject(this);
        String res = out.toString("ISO-8859-1");
        return res;
    }

    public BlockBody deserialize(String str) throws IOException, ClassNotFoundException {
        ByteArrayInputStream byteIn = new ByteArrayInputStream(str.getBytes("ISO-8859-1"));
        ObjectInputStream objIn = new ObjectInputStream(byteIn);
        BlockBody res =(BlockBody) objIn.readObject();
        return res;
    }
    public void addTransaction(Transaction transaction){
        this.transactionList.add(transaction);
    }

    public void addEnclavePk(PKType pk ){
        enclavePubKeyCS.add(pk);
    }

    public void addRevokeKey(PKType pk){
        keyListRevoke.add(pk);
    }

    public void addAlterKey(PKType pk){
        keyListAlter.add(pk);
    }

    public void addRegisterKey(PKType pk){
        keyListRegister.add(pk);
    }

}
